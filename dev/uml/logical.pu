@startuml
namespace org.apache.spark.sql.catalyst.rules{
  abstract class Rule
}

namespace org.apache.spark.sql{
  class OpaqueDatasetFunctions <<Serializable>> {
    OpaqueDatasetFunctions[T](ds: Dataset[T])
    +encrypted(): DataFrame
  }
  class QShieldDatasetFunctions <<Serializable>> {
    QShieldDatasetFunctions[T](ds: Dataset[T])
    +acPolicyApplied(tk: Array[Byte]): DataFrame
    +resPrepared() : DataFrame
  }
}

namespace edu.berkeley.cs.rise.opaque{
  class implicits << (O,orchid) Object >> {
    +datasetToOpaqueDatasetFunctions[T](ds: Dataset[T]): OpaqueDatasetFunctions
  }
  namespace logical{
    interface OpaqueOperator <<trait>> {
      +references: AttributeSet
    }

    class Encrypt{
      +output: Seq[Attribute]
      Encrypt(child: LogicalPlan)
    }
    class EncryptedLocalRelation{
      #stringArgs: Iterator
      EncryptedLocalRelation(output: Seq[Attribute], plaintextData: Seq[InternalRow])
      +newInstance(): EncryptedLocalRelation
    }
    class EncryptedBlockRDD{
      +children: Seq[LogicalPlan]
      +producedAttributes: AttributeSet
      EncryptedBlockRDD(output: Seq[Attribute], rdd: RDD[Block])
      +newInstance(): EncryptedBlockRDD
    }
    class EncryptedProject{
      +output: Seq[Attribute]
      EncryptedProject(projectList: Seq[NamedExpression], child: OpaqueOperator)
    }
    class EncryptedFilter{
      +output: Seq[Attribute]
      EncryptedFilter(condition: Expression, child: OpaqueOperator)
    }
    class EncryptedSort{
      +output: Seq[Attribute]
      EncryptedSort(order: Seq[SortOrder], child: OpaqueOperator)
    }
    class EncryptedAggregate{
      +producedAttributes: AttributeSet
      +output: Seq[Attribute]
      EncryptedAggregate(groupingExpressions: Seq[Expression], aggExpressions: Seq[NamedExpression], child: OpaqueOperator)
    }
    class EncryptedJoin{
      +output: Seq[Attribute]
      EncryptedJoin(left: OpaqueOperator, right: OpaqueOperator, joinType: JoinType, condition: Option[Expression])
    }
    class EncryptedUnion{
      +output: Seq[Attribute]
      EncryptedUnion(left: OpaqueOperator, right: OpaqueOperator)
    }

    class EncryptLocalRelation << (O,orchid) Object >> {
      +apply(plan: LogicalPlan): LogicalPlan
    }
    class ConvertToOpaqueOperators << (O,orchid) Object >> {
      +isEncrypted(plan: LogicalPlan): Boolean
      +isEncrypted(plan: SparkPlan): Boolean
      +apply(plan: LogicalPlan): LogicalPlan
    }
  }
}

namespace edu.xjtu.cs.cyx.qshield{
  class implicits << (O,orchid) Object >> {
    +datasetToQShieldDatasetFunctions[T](ds: Dataset[T]): QShieldDatasetFunctions[T]
  }
  namespace logical{
    class ACPolicyApply{
      ACPolicyApply(child: LogicalPlan, tk: Array[Byte])
      +output: Seq[Attribute]
    }
    class ACPolicyAppliedEncryptedBlockRDD{
      ACPolicyAppliedEncryptedBlockRDD(output: Seq[Attribute], rdd: RDD[Block], tk: Array[Byte])
      +newInstance(): ACPolicyAppliedEncryptedBlockRDD
      #stringArgs: Iterator
    }
    class ResPrepared{
      ResPrepared(child: LogicalPlan)
      +output: Seq[Attribute]
    }
    class ResPreparedEncryptedBlockRDD{
      ResPreparedEncryptedBlockRDD(child: LogicalPlan)
      +output: Seq[Attribute]
    }
    class ACPolicyApplyEncryptedBlockRDD << (O,orchid) Object >> {
      +apply(plan: LogicalPlan): LogicalPlan
    }
    class ConvertToQShieldOperators << (O,orchid) Object >> {
      +isEncrypted(plan: LogicalPlan)
      +apply(plan: LogicalPlan): LogicalPlan
    }
  }
}

edu.berkeley.cs.rise.opaque.logical.Encrypt ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedLocalRelation ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedBlockRDD ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedProject ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedFilter ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedSort ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedAggregate ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedJoin ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedUnion ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator

edu.berkeley.cs.rise.opaque.logical.EncryptLocalRelation -down-> edu.berkeley.cs.rise.opaque.logical.EncryptedLocalRelation
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators --> edu.berkeley.cs.rise.opaque.logical.EncryptedBlockRDD
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators --> edu.berkeley.cs.rise.opaque.logical.EncryptedProject
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators --> edu.berkeley.cs.rise.opaque.logical.EncryptedFilter
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators --> edu.berkeley.cs.rise.opaque.logical.EncryptedSort
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators --> edu.berkeley.cs.rise.opaque.logical.EncryptedJoin
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators --> edu.berkeley.cs.rise.opaque.logical.EncryptedAggregate
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators --> edu.berkeley.cs.rise.opaque.logical.EncryptedUnion
edu.berkeley.cs.rise.opaque.logical.EncryptLocalRelation -down-|> org.apache.spark.sql.catalyst.rules.Rule
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators -down-|> org.apache.spark.sql.catalyst.rules.Rule

edu.berkeley.cs.rise.opaque.logical.Encrypt <.right. org.apache.spark.sql.OpaqueDatasetFunctions
org.apache.spark.sql.OpaqueDatasetFunctions <.up. edu.berkeley.cs.rise.opaque.implicits

edu.xjtu.cs.cyx.qshield.logical.ACPolicyApplyEncryptedBlockRDD -up-> edu.xjtu.cs.cyx.qshield.logical.ACPolicyApply
edu.xjtu.cs.cyx.qshield.logical.ACPolicyApplyEncryptedBlockRDD -up-> edu.xjtu.cs.cyx.qshield.logical.ACPolicyAppliedEncryptedBlockRDD
edu.xjtu.cs.cyx.qshield.logical.ConvertToQShieldOperators -up-> edu.xjtu.cs.cyx.qshield.logical.ResPrepared
edu.xjtu.cs.cyx.qshield.logical.ConvertToQShieldOperators -up-> edu.xjtu.cs.cyx.qshield.logical.ResPreparedEncryptedBlockRDD
edu.xjtu.cs.cyx.qshield.logical.ACPolicyApply .up.|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.xjtu.cs.cyx.qshield.logical.ACPolicyAppliedEncryptedBlockRDD .up.|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.xjtu.cs.cyx.qshield.logical.ResPrepared .up.|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.xjtu.cs.cyx.qshield.logical.ResPreparedEncryptedBlockRDD .up.|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.xjtu.cs.cyx.qshield.logical.ACPolicyApplyEncryptedBlockRDD -down-|> org.apache.spark.sql.catalyst.rules.Rule
edu.xjtu.cs.cyx.qshield.logical.ConvertToQShieldOperators -down-|> org.apache.spark.sql.catalyst.rules.Rule

edu.xjtu.cs.cyx.qshield.implicits .down.> org.apache.spark.sql.QShieldDatasetFunctions
org.apache.spark.sql.QShieldDatasetFunctions .up.> edu.xjtu.cs.cyx.qshield.logical.ACPolicyApply
org.apache.spark.sql.QShieldDatasetFunctions .up.> edu.xjtu.cs.cyx.qshield.logical.ResPrepared
@enduml
