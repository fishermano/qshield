@startuml
skinparam classAttributeIconSize 0

namespace org.apache.spark.sql.execution{
  abstract class SparkPlan
}

namespace org.apache.spark.sql.catalyst.rules{
  abstract class Rule
}

namespace org.apache.spark.sql{
  abstract class Strategy

  class OpaqueDatasetFunctions <<Serializable>> {
    OpaqueDatasetFunctions[T](ds: Dataset[T])
    +encrypted(): DataFrame
  }
}

'for qshield
namespace org.apache.spark.sql.qshield{
  abstract class Strategy

  class QShieldDatasetFunctions <<Serializable>> {
    QShieldDatasetFunctions[T](ds: Dataset[T])
    +acPolicyApplied(tk: Array[Byte]): DataFrame
    +resPrepared() : DataFrame
  }
}

namespace edu.xjtu.cs.cyx.qshield.owner{
  class SP <<Serializable>><<Java Native Interface>>
}

namespace edu.berkeley.cs.rise.opaque{
  namespace benchmark{
    class Benchmark << (O,orchid) Object >> {
      + dataDir : String
      + main(args : Array[String]) : Unit
    }
    class BigDataBenchmark << (O,orchid) Object >> {
      +rankings(spark: SparkSession, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
      +uservisits(spark: SparkSession, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
      +q1(spark: SparkSession, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
      +q2(spark: SparkSession, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
      +q3(spark: SparkSession, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
    }
    class KMeans << (O,orchid) Object >> {
      +data(spark: SparkSession, securityLevel: SecurityLevel, numPartitions: Int, rand: Random, N: Int, D: Int): DataFrame
      +train(spark: SparkSession, securityLevel: SecurityLevel, numPartitions: Int, N: Int, D: Int, K: Int, convergeDist: Double): Array[Array[Double]]
    }
    class LeastSquares << (O,orchid) Object >> {
      +data(spark: SparkSession, securityLevel: SecurityLevel, numPartitions: Int): DataFrame
      +query(spark: SparkSession, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
    }
    class LogisticRegression << (O,orchid) Object >> {
      +data(spark: SparkSession, securityLevel: SecurityLevel, numPartitions: Int, rand: Random, N: Int, D: Int, R: Double): DataFrame
      +train(spark: SparkSession, securityLevel: SecurityLevel, N: Int, numPartitions: Int): Array[Double]
    }
    class PageRank << (O,orchid) Object >> {
      +run(spark: SparkSession, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
    }
    class TPCH << (O,orchid) Object >> {
      -tpch9EncryptedDFs(sqlContext: SQLContext, securityLevel: SecurityLevel, size: String, numPartitions: Int): (DataFrame, DataFrame, DataFrame, DataFrame, DataFrame, DataFrame)
      +part(sqlContext: SQLContext, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
      +supplier(sqlContext: SQLContext, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
      +lineitem(sqlContext: SQLContext, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
      +partsupp(sqlContext: SQLContext, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
      +orders(sqlContext: SQLContext, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
      +nation(sqlContext: SQLContext, securityLevel: SecurityLevel, size: String, numPartitions: Int): DataFrame
      +tpch9(sqlContext: SQLContext, securityLevel: SecurityLevel, size: String, numPartitions: Int, quantityThreshold: Option[Int] = None): DataFrame
    }
    interface SecurityLevel <<sealed trait>> {
      +name: String
      +applyTo[T](df: DataFrame): DataFrame
    }
    class Encrypted << (O,orchid) Object >> {
      +name: String <i><color:grey>default="encrypted"</color></i>
      +applyTo[T](df: DataFrame): DataFrame
    }
    class Insecure << (O,orchid) Object >> {
      +name: String <i><color:grey>default="spark sql"</color></i>
      +applyTo[T](df: DataFrame): DataFrame
    }
  }

  namespace execution{
    interface LeafExecNode <<trait>>{
      +child: Seq[SparkPlan] <i><color:grey>default=Nil</color></i>
      +producedAttributes: AttributeSet <i><color:grey>default=outputSet</color></i>
    }
    interface UnaryExecNode <<trait>>{
      +child: SparkPlan
      +children: Seq[SparkPlan] <i><color:grey>default=child :: Nil</color></i>
      +outputPartitioning: Partitioning <i><color:grey>default=child.outputPartitioning</color></i>
    }
    interface BinaryExecNode <<trait>>{
      +left: SparkPlan
      +right: SparkPlan
      +children: Seq[SparkPlan] <i><color:grey>default=Seq[left,right]</color></i>
    }
    interface OpaqueOperatorExec <<trait>>{
      +executeBlocked(): RDD[Block]
      +timeOperator[A](childRDD: RDD[A], desc: String)(f: RDD[A] => RDD[Block]): RDD[Block]
      +doExecute(): RDD[InternalRow]
      +executeCollect(): Array[InternalRow]
      +executeTake(n: Int): Array[InternalRow]
    }
    class Block <<Serializable>>{
      +bytes: Array[Byte]
    }
    class EncryptedLocalTableScanExec{
      -unsafeRows: Array[InternalRow]
      EncryptedLocalTableScanExec(output: Seq[Attribute], plaintextData: Seq[InternalRow])
      +executeBlocked(): RDD[Block]
    }
    class EncryptExec{
      +output: Seq[Attribute]
      EncryptExec(child: SparkPlan)
      +executeBlocked(): RDD[Block]
    }
    class EncryptedBlockRDDScanExec{
      EncryptedBlockRDDScanExec(output: Seq[Attribute], rdd: RDD[Block])
      +executeBlocked(): RDD[Block]
    }
    class EncryptedProjectExec{
      +output: Seq[Attribute]
      EncryptedProjectExec(projectList: Seq[NamedExpression], child: SparkPlan)
      +executeBlocked(): RDD[Block]
    }
    class EncryptedFilterExec{
      +output: Seq[Attribute]
      EncryptedFilterExec(condition: Expression, child: SparkPlan)
      +executeBlocked(): RDD[Block]
    }
    class EncryptedAggregateExec{
      +producedAttributes: AttributeSet
      +output: Seq[Attribute]
      EncryptedAggregateExec(groupingExpressions: Seq[Expression], aggExpressions: Seq[NamedExpression], child: SparkPlan)
      +executeBlocked(): RDD[Block]
    }
    class EncryptedSortMergeJoinExec{
      EncryptedSortMergeJoinExec(joinType: JoinType, leftKeys: Seq[Expression], rightKeys: Seq[Expression], leftSchema: Seq[Attribute], rightSchema: Seq[Attribute],output: Seq[Attribute], child: SparkPlan)
      +executeBlocked(): RDD[Block]
    }
    class EncryptedUnionExec{
      +output: Seq[Attribute]
      EncryptedUnionExec(left: SparkPlan, right: SparkPlan)
      +executeBlocked(): RDD[Block]
    }
    class EncryptedSortExec{
      +output: Seq[Attribute]
      EncryptedSortExec(order: Seq[SortOrder], child: SparkPlan)
      +executeBlocked(): RDD[Block]
    }
    class SGXEnclave <<Serializable>><<Java Native Interface>>{
      +StartEnclave(libraryPath: String): Long
      +StopEnclave(enclaveId: Long): Unit
      +RemoteAttestation0(eid: Long): Array[Byte]
      +RemoteAttestation1(eid: Long): Array[Byte]
      +RemoteAttestation2(eid: Long, msg2Input: Array[Byte]): Array[Byte]
      +RemoteAttestation3(eid: Long, attResultInput: Array[Byte]): Unit
      +Project(eid: Long, condition: Array[Byte], input: Array[Byte]): Array[Byte]
      +Filter(eid: Long, condition: Array[Byte], input: Array[Byte]): Array[Byte]
      +Encrypt(eid: Long, plaintext: Array[Byte]): Array[Byte]
      +Decrypt(eid: Long, ciphertext: Array[Byte]): Array[Byte]
      +Sample(eid: Long, input: Array[Byte]): Array[Byte]
      +FindRangeBounds(eid: Long, order: Array[Byte], numPartitions: Int, input: Array[Byte]): Array[Byte]
      +PartitionForSort(eid: Long, order: Array[Byte], numPartitions: Int, input: Array[Byte],boundaries: Array[Byte]): Array[Array[Byte]]
      +ExternalSort(eid: Long, order: Array[Byte], input: Array[Byte]): Array[Byte]
      +ScanCollectLastPrimary(eid: Long, joinExpr: Array[Byte], input: Array[Byte]): Array[Byte]
      +NonObliviousSortMergeJoin(eid: Long, joinExpr: Array[Byte], input: Array[Byte], joinRow: Array[Byte]): Array[Byte]
      +NonObliviousAggregateStep1(eid: Long, aggOp: Array[Byte], inputRows: Array[Byte]): (Array[Byte], Array[Byte], Array[Byte])
      +NonObliviousAggregateStep2(eid: Long, aggOp: Array[Byte], inputRows: Array[Byte], nextPartitionFirstRow: Array[Byte], prevPartitionLastGroup: Array[Byte], prevPartitionLastRow: Array[Byte]): Array[Byte]
    }

  }

  namespace expressions{
    class ClosestPoint{
      +dataType: DataType
      +inputTypes: Seq[]
      ClosestPoint(left: Expression, right: Expression)
      #nullSafeEval(input1: Any, input2: Any): ArrayData
    }
    class DotProduct{
      +dataType: DataType
      +inputTypes: Array[]
      +symbol: String
      +sqlOperator: String
      DotProduct(left: Expression, right: Expression)
      #nullSafeEval(input1: Any, input2: Any): Double
    }
    class VectorAdd{
      +dataType: DataType
      +inputTypes: Array[]
      +symbol: String
      +sqlOperator: String
      VectorAdd(left: Expression, right: Expression)
      #nullSafeEval(input1: Any, input2: Any): ArrayData
    }
    class VectorMultiply{
      +dataType: DataType
      +inputTypes: Seq[]
      VectorMultiply(left: Expression, right: Expression)
      #nullSafeEval(input1: Any, input2: Any): ArrayData
    }
    class VectorSum{
      +inputSchema: StructType
      +bufferSchema: StructType
      +dataType: DataType
      +deterministic: Boolean
      -addArray(agg: Array[Double], arr: Array[Double]): Unit
      -ensureArraySize(agg: Array[Double], size: Int): Array[Double]
      +initialize(buffer: MutableAggregationBuffer): Unit
      +update(buffer: MutableAggregationBuffer, input: Row): Unit
      +merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit
      +evaluate(buffer: Row): Array[Double]
    }
  }

  namespace logical{
    interface OpaqueOperator <<trait>> {
      +references: AttributeSet
    }

    class Encrypt{
      +output: Seq[Attribute]
      Encrypt(child: LogicalPlan)
    }
    class EncryptedLocalRelation{
      #stringArgs: Iterator
      EncryptedLocalRelation(output: Seq[Attribute], plaintextData: Seq[InternalRow])
      +newInstance(): EncryptedLocalRelation
    }
    class EncryptedBlockRDD{
      +children: Seq[LogicalPlan]
      +producedAttributes: AttributeSet
      EncryptedBlockRDD(output: Seq[Attribute], rdd: RDD[Block])
      +newInstance(): EncryptedBlockRDD
    }
    class EncryptedProject{
      +output: Seq[Attribute]
      EncryptedProject(projectList: Seq[NamedExpression], child: OpaqueOperator)
    }
    class EncryptedFilter{
      +output: Seq[Attribute]
      EncryptedFilter(condition: Expression, child: OpaqueOperator)
    }
    class EncryptedSort{
      +output: Seq[Attribute]
      EncryptedSort(order: Seq[SortOrder], child: OpaqueOperator)
    }
    class EncryptedAggregate{
      +producedAttributes: AttributeSet
      +output: Seq[Attribute]
      EncryptedAggregate(groupingExpressions: Seq[Expression], aggExpressions: Seq[NamedExpression], child: OpaqueOperator)
    }
    class EncryptedJoin{
      +output: Seq[Attribute]
      EncryptedJoin(left: OpaqueOperator, right: OpaqueOperator, joinType: JoinType, condition: Option[Expression])
    }
    class EncryptedUnion{
      +output: Seq[Attribute]
      EncryptedUnion(left: OpaqueOperator, right: OpaqueOperator)
    }

    class EncryptLocalRelation << (O,orchid) Object >> {
      +apply(plan: LogicalPlan): LogicalPlan
    }
    class ConvertToOpaqueOperators << (O,orchid) Object >> {
      +isEncrypted(plan: LogicalPlan): Boolean
      +isEncrypted(plan: SparkPlan): Boolean
      +apply(plan: LogicalPlan): LogicalPlan
    }
  }

  class implicits << (O,orchid) Object >> {
    +datasetToOpaqueDatasetFunctions[T](ds: Dataset[T]): OpaqueDatasetFunctions
  }
  class OpaqueOperators << (O,orchid) Object >> {
    -tagForJoin(keys: Seq[Expression], input: Seq[Attribute], isLeft: Boolean): (Seq[NamedExpression], Seq[NamedExpression], NamedExpression)
    -sortForJoin(leftKeys: Seq[Expression], tag: Expression, input: Seq[Attribute]): Seq[SortOrder]
    -dropTags(leftOutput: Seq[Attribute], rightOutput: Seq[Attribute]): Seq[NamedExpression]
    +apply(plan: LogicalPlan): Seq[SparkPlan]
  }
  class RA << (O,orchid) Object >> {
    +initRA(sc: SparkContext): Unit
  }
  class OpaqueException{
    OpaqueException(message: String)
    +this(message: String, cause: Throwable)
    +this(cause: Throwable)
    +this()
  }
  class EncryptedSource{
    +createRelation(sqlContext: SQLContext, parameters: Map[String, String]): BaseRelation
    +createRelation(sqlContext: SQLContext, parameters: Map[String, String], schema: StructType): BaseRelation
    +createRelation(sqlContext: SQLContext, mode: SaveMode, parameters: Map[String, String], data: DataFrame): BaseRelation
  }
  class EncryptedScan{
    +sqlContext: SQLContext
    +needConversion: Boolean
    EncryptedScan(path: String, val schema: StructType)(sparkSession: SparkSession)
    buildBlockedScan(): RDD[Block]
  }
  class Utils << (O,orchid) Object>> {
    -perf : Boolean <i><color:grey>default=System.getenv."SGX_PERF"</color></i>
    +eid: Long <i><color:grey>default=0</color></i>
    +GCM_IV_LENGTH: Int <i><color:grey>default=12</color></i>
    +GCM_KEY_LENGTH: Int <i><color:grey>default=16</color></i>
    +GCM_TAG_LENGTH: Int <i><color:grey>default=16</color></i>
    +sharedKey: Array[Byte] <i><color:grey>default="Opaque devel key".getBytes</color></i>
    +attested: Boolean <i><color:grey>default=false</color></i>
    +attesting_getepid: Boolean <i><color:grey>default=false</color></i>
    +attesting_getmsg1: Boolean <i><color:grey>default=false</color></i>
    +attesting_getmsg3: Boolean <i><color:grey>default=false</color></i>
    +attesting_final_ra: Boolean <i><color:grey>default=false</color></i>
    +MaxBlockSize: Int <i><color:grey>default=1000</color></i>
    +emptyBlock: Block
    -jsonSerialize(x: Any): String
    +time[A](desc: String)(f: => A): A
    +logPerf(message: String): Unit
    +retry[T](n: Int)(fn: => T): T
    +timeBenchmark[A](benchmarkAttrs: (String, Any)*)(f: => A): A
    +findLibraryAsResource(libraryName: String): String
    +findResource(resourceName: String): String
    +createTempDir(): File
    +deleteRecursively(file: File): Unit
    +initEnclave(): (SGXEnclave, Long)
    +encrypt(data: Array[Byte]): Array[Byte]
    +decrypt(data: Array[Byte]): Array[Byte]
    +initSQLContext(sqlContext: SQLContext): Unit
    +concatByteArrays(arrays: Array[Array[Byte]]): Array[Byte]
    +splitBytes(bytes: Array[Byte], numSplits: Int): Array[Array[Byte]]
    +ensureCached[T](rdd: RDD[T], storageLevel: StorageLevel): RDD[T]
    +ensureCached[T](rdd: RDD[T]): RDD[T]
    +ensureCached[T](ds: Dataset[T], storageLevel: StorageLevel): Dataset[T]
    +ensureCached[T](ds: Dataset[T]): Dataset[T]
    +force(ds: Dataset[_]): Unit
    +flatbuffersCreateField(builder: FlatBufferBuilder, value: Any, dataType: DataType, isNull: Boolean): Int
    +flatbuffersExtractFieldValue(f: tuix.Field): Any
    +encryptInternalRowsFlatbuffers(rows: Seq[InternalRow], types: Seq[DataType], useEnclave: Boolean): Block
    +decryptBlockFlatbuffers(block: Block): Seq[InternalRow]
    +treeFold[BaseType <: TreeNode[BaseType], B](tree: BaseType)(op: (Seq[B], BaseType) => B): B
    +flatbuffersSerializeExpression(builder: FlatBufferBuilder, expr: Expression, input: Seq[Attribute]): Int
    +serializeFilterExpression(condition: Expression, input: Seq[Attribute]): Array[Byte]
    +serializeProjectList(projectList: Seq[NamedExpression], input: Seq[Attribute]): Array[Byte]
    +serializeSortOrder(sortOrder: Seq[SortOrder], input: Seq[Attribute]): Array[Byte]
    +serializeJoinExpression(joinType: JoinType, leftKeys: Seq[Expression], rightKeys: Seq[Expression], leftSchema: Seq[Attribute], rightSchema: Seq[Attribute]): Array[Byte]
    +serializeAggOp(groupingExpressions: Seq[Expression], aggExpressions: Seq[NamedExpression], input: Seq[Attribute]): Array[Byte]
    +serializeAggExpression(builder: FlatBufferBuilder, e: AggregateExpression, input: Seq[Attribute], aggSchema: Seq[Attribute], concatSchema: Seq[Attribute]): Int
    +concatEncryptedBlocks(blocks: Seq[Block]): Block
  }
}

namespace edu.xjtu.cs.cyx.qshield{
  namespace benchmark{
    class QBigDataBenchmark << (O,orchid) Object >> {
      +rankings(spark: SparkSession, qsecurityLevel: QSecurityLevel, size: String, numPartitions: Int): DataFrame
      +uservisits(spark: SparkSession, qsecurityLevel: QSecurityLevel, size: String, numPartitions: Int): DataFrame
      +q1(spark: SparkSession, qsecurityLevel: QSecurityLevel, size: String, numPartitions: Int): DataFrame
      +q2(spark: SparkSession, qsecurityLevel: QSecurityLevel, size: String, numPartitions: Int): DataFrame
      +q3(spark: SparkSession, qsecurityLevel: QSecurityLevel, size: String, numPartitions: Int): DataFrame
      +q(spark: SparkSession, qsecurityLevel: QSecurityLevel, size: String, numPartitions: Int) : DataFrame
    }
    interface QSecurityLevel <<trait>> {
      +name: String
      +applyTo[T](df: DataFrame): DataFrame
    }
    class QEncrypted << (O,orchid) Object >> {
      +name: String <i><color:grey>default="encrypted"</color></i>
      +GCM_IV_LENGTH: Int <i><color:grey>default=12</color></i>
      +GCM_KEY_LENGTH: Int <i><color:grey>default=16</color></i>
      +GCM_TAG_LENGTH: Int <i><color:grey>default=16</color></i>
      +tokenKey: Array[Byte] <i><color:grey>default="Opaque devel key".getBytes</color></i>
      +encrypt(data: Array[Byte]): Array[Byte]
      +applyTo[T](df: DataFrame): DataFrame
    }
  }

  namespace execution{
    class ACPolicyAppliedEncryptedBlockRDDExec{
      ACPolicyAppliedEncryptedBlockRDDExec(output: Seq[Attribute], rdd: RDD[Block], tk: Array[Byte])
      +executeBlocked(): RDD[Block]
    }
    class ResPreparedEncryptedBlockRDDExec{
      ResPreparedEncryptedBlockRDDExec(child: SparkPlan)
      +output: Seq[Attribute]
      +executeBlocked(): RDD[Block]
    }
    class QEncryptedFilterExec{
      QEncryptedFilterExec(condition: Expression, child: SparkPlan)
      +output: Seq[Attribute]
      +executeBlocked(): RDD[Block]
    }
    class QEncryptedProjectExec{
      QEncryptedProjectExec(projectList: Seq[NamedExpression], child: SparkPlan)
      +output: Seq[Attribute]
      +executeBlocked(): RDD[Block]
    }
    class QEncryptedAggregateExec{
      QEncryptedAggregateExec(groupingExpressions: Seq[Expression], aggExpressions: Seq[NamedExpression], child: SparkPlan)
      +producedAttributes: AttributeSet
      +output: Seq[Attribute]
      +executeBlocked(): RDD[Block]
    }
    class QEncryptedSortExec{
      QEncryptedSortExec(order: Seq[SortOrder], child: SparkPlan)
      +output: Seq[Attribute]
      +executeBlocked(): RDD[Block]
    }
    class QEncryptedSortMergeJoinExec{
      QEncryptedSortMergeJoinExec(joinType: JoinType, leftKeys: Seq[Expression], rightKeys: Seq[Expression], leftSchema: Seq[Attribute], rightSchema: Seq[Attribute], output: Seq[Attribute], child: SparkPlan)
      +executeBlocked(): RDD[Block]
    }
    class QEncryptedUnionExec{
      QEncryptedUnionExec(left: SparkPlan, right: SparkPlan)
      +output: Seq[Attribute]
      +executeBlocked(): RDD[Block]
    }
    class QEncryptedBlockRDDScanExec{
      QEncryptedBlockRDDScanExec(output: Seq[Attribute], rdd: RDD[Block])
      +executeBlocked(): RDD[Block]
    }
    class QShieldSGXEnclave <<Serializable>><<Java Native Interface>> {
      +ACPolicyApplied(eid: Long, input: Array[Byte], tk: Array[Byte]): Array[Byte]
      +ResPrepared(eid: Long, input: Array[Byte]): Array[Byte]
      +QProject(eid: Long, projectList: Array[Byte], input: Array[Byte]): Array[Byte]
      +QFilter(eid: Long, condition: Array[Byte], input: Array[Byte]): Array[Byte]
      +QAggregateStep1(eid: Long, aggOp: Array[Byte], inputRows: Array[Byte]): (Array[Byte], Array[Byte], Array[Byte])
      +QAggregateStep2(eid: Long, aggOp: Array[Byte], inputRows: Array[Byte], nextPartitionFirstRow: Array[Byte], prevPartitionLastGroup: Array[Byte], prevPartitionLastRow: Array[Byte]): Array[Byte]
      +QSample(eid: Long, input: Array[Byte]): Array[Byte]
      +QFindRangeBounds(eid: Long, order: Array[Byte], numPartitions: Int, input: Array[Byte]): Array[Byte]
      +QPartitionForSort(eid: Long, order: Array[Byte], numPartitions: Int, input: Array[Byte], boundaries: Array[Byte]): Array[Array[Byte]]
      +QExternalSort(eid: Long, order: Array[Byte], input: Array[Byte]): Array[Byte]
      +QScanCollectLastPrimary(eid: Long, joinExpr: Array[Byte], input: Array[Byte]): Array[Byte]
      +QSortMergeJoin(eid: Long, joinExpr: Array[Byte], input: Array[Byte], joinRow: Array[Byte]): Array[Byte]
      +InitPairing(eid: Long, param: Array[Byte]): Unit
    }
  }

  namespace logical{
    class ACPolicyApply{
      ACPolicyApply(child: LogicalPlan, tk: Array[Byte])
      +output: Seq[Attribute]
    }
    class ACPolicyAppliedEncryptedBlockRDD{
      ACPolicyAppliedEncryptedBlockRDD(output: Seq[Attribute], rdd: RDD[Block], tk: Array[Byte])
      +newInstance(): ACPolicyAppliedEncryptedBlockRDD
      #stringArgs: Iterator
    }
    class ResPrepared{
      ResPrepared(child: LogicalPlan)
      +output: Seq[Attribute]
    }
    class ResPreparedEncryptedBlockRDD{
      ResPreparedEncryptedBlockRDD(child: LogicalPlan)
      +output: Seq[Attribute]
    }
    class ACPolicyApplyEncryptedBlockRDD << (O,orchid) Object >> {
      +apply(plan: LogicalPlan): LogicalPlan
    }
    class ConvertToQShieldOperators << (O,orchid) Object >> {
      +isEncrypted(plan: LogicalPlan)
      +apply(plan: LogicalPlan): LogicalPlan
    }
  }

  class implicits << (O,orchid) Object >> {
    +datasetToQShieldDatasetFunctions[T](ds: Dataset[T]): QShieldDatasetFunctions[T]
  }
  class QOwnerStuber << (O,orchid) Object >> {
    +qsp: QSP
    +initRA(sqlContext: SQLContext): Unit
    +dataOut(sqlContext: SQLContext, srcFilePath: String, tableName: String, schema: StructType, numPartitions: Int): Unit
    +getSk(): Array[Byte]
  }
  class QShieldUtils << (O,orchid) Object >> {
    +qshieldHome: String
    +eid: Long
    +emptyBlock: Block
    +initQShieldSQLContext(sqlContext: SQLContext): Unit
    +concatQEncryptedBlocks(blocks: Seq[Block]): Block
  }
  class QShieldOperators {
    +apply(plan: LogicalPlan): Seq[SparkPlan]
    +tagForJoin(keys: Seq[Expression], input: Seq[Attribute], isLeft: Boolean): (Seq[NamedExpression], Seq[NamedExpression], NamedExpression)
    +sortForJoin(leftKeys: Seq[Expression], tag: Expression, input: Seq[Attribute]): Seq[SortOrder]
    +dropTags(leftOutput: Seq[Attribute], rightOutput: Seq[Attribute]): Seq[NamedExpression]
  }
}

'opaque
edu.berkeley.cs.rise.opaque.Utils <.down. edu.berkeley.cs.rise.opaque.benchmark.Benchmark
edu.berkeley.cs.rise.opaque.Utils <.down. edu.berkeley.cs.rise.opaque.benchmark.BigDataBenchmark
edu.berkeley.cs.rise.opaque.Utils <.down. edu.berkeley.cs.rise.opaque.benchmark.KMeans
edu.berkeley.cs.rise.opaque.Utils <.down. edu.berkeley.cs.rise.opaque.benchmark.LeastSquares
edu.berkeley.cs.rise.opaque.Utils <.down. edu.berkeley.cs.rise.opaque.benchmark.LogisticRegression
edu.berkeley.cs.rise.opaque.Utils <.down. edu.berkeley.cs.rise.opaque.benchmark.PageRank
edu.berkeley.cs.rise.opaque.Utils .up.> edu.berkeley.cs.rise.opaque.execution.Block

edu.berkeley.cs.rise.opaque.benchmark.SecurityLevel <.. edu.berkeley.cs.rise.opaque.benchmark.Benchmark
edu.berkeley.cs.rise.opaque.benchmark.SecurityLevel <.. edu.berkeley.cs.rise.opaque.benchmark.BigDataBenchmark
edu.berkeley.cs.rise.opaque.benchmark.SecurityLevel <.. edu.berkeley.cs.rise.opaque.benchmark.KMeans
edu.berkeley.cs.rise.opaque.benchmark.SecurityLevel <.. edu.berkeley.cs.rise.opaque.benchmark.LeastSquares
edu.berkeley.cs.rise.opaque.benchmark.SecurityLevel <.. edu.berkeley.cs.rise.opaque.benchmark.LogisticRegression
edu.berkeley.cs.rise.opaque.benchmark.SecurityLevel <.. edu.berkeley.cs.rise.opaque.benchmark.PageRank
edu.berkeley.cs.rise.opaque.benchmark.SecurityLevel <.right. edu.berkeley.cs.rise.opaque.benchmark.TPCH
edu.berkeley.cs.rise.opaque.benchmark.SecurityLevel <|-up- edu.berkeley.cs.rise.opaque.benchmark.Encrypted
edu.berkeley.cs.rise.opaque.benchmark.SecurityLevel <|-up- edu.berkeley.cs.rise.opaque.benchmark.Insecure

org.apache.spark.sql.execution.SparkPlan <|-up- edu.berkeley.cs.rise.opaque.execution.LeafExecNode
org.apache.spark.sql.execution.SparkPlan <|-up- edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
org.apache.spark.sql.execution.SparkPlan <|-up- edu.berkeley.cs.rise.opaque.execution.BinaryExecNode
org.apache.spark.sql.execution.SparkPlan <|-up- edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec

edu.berkeley.cs.rise.opaque.execution.EncryptedLocalTableScanExec --|> edu.berkeley.cs.rise.opaque.execution.LeafExecNode
edu.berkeley.cs.rise.opaque.execution.EncryptedLocalTableScanExec ..|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.berkeley.cs.rise.opaque.execution.EncryptExec --|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.berkeley.cs.rise.opaque.execution.EncryptExec ..|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.berkeley.cs.rise.opaque.execution.EncryptedBlockRDDScanExec --|> edu.berkeley.cs.rise.opaque.execution.LeafExecNode
edu.berkeley.cs.rise.opaque.execution.EncryptedBlockRDDScanExec ..|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.berkeley.cs.rise.opaque.execution.EncryptedProjectExec --|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.berkeley.cs.rise.opaque.execution.EncryptedProjectExec ..|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.berkeley.cs.rise.opaque.execution.EncryptedFilterExec --|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.berkeley.cs.rise.opaque.execution.EncryptedFilterExec ..|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.berkeley.cs.rise.opaque.execution.EncryptedAggregateExec --|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.berkeley.cs.rise.opaque.execution.EncryptedAggregateExec ..|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.berkeley.cs.rise.opaque.execution.EncryptedSortMergeJoinExec --|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.berkeley.cs.rise.opaque.execution.EncryptedSortMergeJoinExec ..|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.berkeley.cs.rise.opaque.execution.EncryptedUnionExec --|> edu.berkeley.cs.rise.opaque.execution.BinaryExecNode
edu.berkeley.cs.rise.opaque.execution.EncryptedUnionExec ..|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.berkeley.cs.rise.opaque.execution.EncryptedSortExec --|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.berkeley.cs.rise.opaque.execution.EncryptedSortExec ..|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec

edu.berkeley.cs.rise.opaque.execution.EncryptedSortMergeJoinExec .up.> edu.berkeley.cs.rise.opaque.execution.SGXEnclave
edu.berkeley.cs.rise.opaque.execution.EncryptedAggregateExec .up.> edu.berkeley.cs.rise.opaque.execution.SGXEnclave
edu.berkeley.cs.rise.opaque.execution.EncryptedFilterExec .up.> edu.berkeley.cs.rise.opaque.execution.SGXEnclave
edu.berkeley.cs.rise.opaque.execution.EncryptedProjectExec .up.> edu.berkeley.cs.rise.opaque.execution.SGXEnclave
edu.berkeley.cs.rise.opaque.execution.EncryptedSortExec .up.> edu.berkeley.cs.rise.opaque.execution.SGXEnclave

edu.berkeley.cs.rise.opaque.logical.Encrypt ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedLocalRelation ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedBlockRDD ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedProject ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedFilter ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedSort ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedAggregate ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedJoin ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.berkeley.cs.rise.opaque.logical.EncryptedUnion ..|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator

edu.berkeley.cs.rise.opaque.logical.EncryptLocalRelation ..> edu.berkeley.cs.rise.opaque.logical.EncryptedLocalRelation
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators ..> edu.berkeley.cs.rise.opaque.logical.EncryptedBlockRDD
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators ..> edu.berkeley.cs.rise.opaque.logical.EncryptedProject
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators ..> edu.berkeley.cs.rise.opaque.logical.EncryptedFilter
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators ..> edu.berkeley.cs.rise.opaque.logical.EncryptedSort
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators ..> edu.berkeley.cs.rise.opaque.logical.EncryptedJoin
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators ..> edu.berkeley.cs.rise.opaque.logical.EncryptedAggregate
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators ..> edu.berkeley.cs.rise.opaque.logical.EncryptedUnion
edu.berkeley.cs.rise.opaque.logical.EncryptLocalRelation -up-|> org.apache.spark.sql.catalyst.rules.Rule
edu.berkeley.cs.rise.opaque.logical.ConvertToOpaqueOperators -up-|> org.apache.spark.sql.catalyst.rules.Rule

edu.berkeley.cs.rise.opaque.logical.Encrypt <.right. org.apache.spark.sql.OpaqueDatasetFunctions
org.apache.spark.sql.OpaqueDatasetFunctions <.up. edu.berkeley.cs.rise.opaque.implicits

edu.xjtu.cs.cyx.qshield.owner.SP <.up. edu.berkeley.cs.rise.opaque.RA

org.apache.spark.sql.Strategy <|-- edu.berkeley.cs.rise.opaque.OpaqueOperators

'layout
edu.berkeley.cs.rise.opaque.OpaqueOperators <.[hidden]. edu.berkeley.cs.rise.opaque.EncryptedScan
edu.berkeley.cs.rise.opaque.OpaqueOperators <.[hidden]. edu.berkeley.cs.rise.opaque.EncryptedSource
edu.berkeley.cs.rise.opaque.OpaqueOperators <.[hidden]. edu.berkeley.cs.rise.opaque.OpaqueException
edu.xjtu.cs.cyx.qshield.owner.SP <.[hidden]. org.apache.spark.sql.Strategy
edu.berkeley.cs.rise.opaque.expressions.VectorAdd <.[hidden]d. edu.berkeley.cs.rise.opaque.EncryptedScan
edu.berkeley.cs.rise.opaque.expressions.dotProduct <.[hidden]d. edu.berkeley.cs.rise.opaque.EncryptedSource
edu.berkeley.cs.rise.opaque.expressions.ClosestPoint <.[hidden]d. edu.berkeley.cs.rise.opaque.OpaqueException

'qshield
edu.berkeley.cs.rise.opaque.Utils <.up. edu.xjtu.cs.cyx.qshield.benchmark.QBigDataBenchmark

edu.xjtu.cs.cyx.qshield.benchmark.QEncrypted --|> edu.xjtu.cs.cyx.qshield.benchmark.QSecurityLevel
edu.xjtu.cs.cyx.qshield.benchmark.QBigDataBenchmark ..> edu.xjtu.cs.cyx.qshield.benchmark.QSecurityLevel

edu.xjtu.cs.cyx.qshield.execution.ACPolicyAppliedEncryptedBlockRDDExec -up-|> edu.berkeley.cs.rise.opaque.execution.LeafExecNode
edu.xjtu.cs.cyx.qshield.execution.ACPolicyAppliedEncryptedBlockRDDExec .up.|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.xjtu.cs.cyx.qshield.execution.ResPreparedEncryptedBlockRDDExec -up-|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.xjtu.cs.cyx.qshield.execution.ResPreparedEncryptedBlockRDDExec .up.|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.xjtu.cs.cyx.qshield.execution.QEncryptedFilterExec -up-|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.xjtu.cs.cyx.qshield.execution.QEncryptedFilterExec .up.|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.xjtu.cs.cyx.qshield.execution.QEncryptedProjectExec -up-|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.xjtu.cs.cyx.qshield.execution.QEncryptedProjectExec .up.|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.xjtu.cs.cyx.qshield.execution.QEncryptedAggregateExec -up-|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.xjtu.cs.cyx.qshield.execution.QEncryptedAggregateExec .up.|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.xjtu.cs.cyx.qshield.execution.QEncryptedSortExec -up-|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.xjtu.cs.cyx.qshield.execution.QEncryptedSortExec .up.|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.xjtu.cs.cyx.qshield.execution.QEncryptedSortMergeJoinExec -up-|> edu.berkeley.cs.rise.opaque.execution.UnaryExecNode
edu.xjtu.cs.cyx.qshield.execution.QEncryptedSortMergeJoinExec .up.|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.xjtu.cs.cyx.qshield.execution.QEncryptedUnionExec -up-|> edu.berkeley.cs.rise.opaque.execution.BinaryExecNode
edu.xjtu.cs.cyx.qshield.execution.QEncryptedUnionExec .up.|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec
edu.xjtu.cs.cyx.qshield.execution.QEncryptedBlockRDDScanExec -up-|> edu.berkeley.cs.rise.opaque.execution.LeafExecNode
edu.xjtu.cs.cyx.qshield.execution.QEncryptedBlockRDDScanExec .up.|> edu.berkeley.cs.rise.opaque.execution.OpaqueOperatorExec

edu.xjtu.cs.cyx.qshield.execution.ACPolicyAppliedEncryptedBlockRDDExec ..> edu.xjtu.cs.cyx.qshield.execution.QShieldSGXEnclave
edu.xjtu.cs.cyx.qshield.execution.ResPreparedEncryptedBlockRDDExec ..> edu.xjtu.cs.cyx.qshield.execution.QShieldSGXEnclave
edu.xjtu.cs.cyx.qshield.execution.QEncryptedFilterExec ..> edu.xjtu.cs.cyx.qshield.execution.QShieldSGXEnclave
edu.xjtu.cs.cyx.qshield.execution.QEncryptedProjectExec ..> edu.xjtu.cs.cyx.qshield.execution.QShieldSGXEnclave
edu.xjtu.cs.cyx.qshield.execution.QEncryptedAggregateExec ..> edu.xjtu.cs.cyx.qshield.execution.QShieldSGXEnclave
edu.xjtu.cs.cyx.qshield.execution.QEncryptedSortExec ..> edu.xjtu.cs.cyx.qshield.execution.QShieldSGXEnclave
edu.xjtu.cs.cyx.qshield.execution.QEncryptedSortMergeJoinExec ..> edu.xjtu.cs.cyx.qshield.execution.QShieldSGXEnclave

edu.xjtu.cs.cyx.qshield.logical.ACPolicyApplyEncryptedBlockRDD .up.> edu.xjtu.cs.cyx.qshield.logical.ACPolicyApply
edu.xjtu.cs.cyx.qshield.logical.ACPolicyApplyEncryptedBlockRDD .up.> edu.xjtu.cs.cyx.qshield.logical.ACPolicyAppliedEncryptedBlockRDD
edu.xjtu.cs.cyx.qshield.logical.ConvertToQShieldOperators .up.> edu.xjtu.cs.cyx.qshield.logical.ResPrepared
edu.xjtu.cs.cyx.qshield.logical.ConvertToQShieldOperators .up.> edu.xjtu.cs.cyx.qshield.logical.ResPreparedEncryptedBlockRDD
edu.xjtu.cs.cyx.qshield.logical.ACPolicyApply .up.|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.xjtu.cs.cyx.qshield.logical.ACPolicyAppliedEncryptedBlockRDD .up.|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.xjtu.cs.cyx.qshield.logical.ResPrepared .up.|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator
edu.xjtu.cs.cyx.qshield.logical.ResPreparedEncryptedBlockRDD .up.|> edu.berkeley.cs.rise.opaque.logical.OpaqueOperator

edu.xjtu.cs.cyx.qshield.implicits .down.> org.apache.spark.sql.qshield.QShieldDatasetFunctions
org.apache.spark.sql.qshield.QShieldDatasetFunctions .up.> edu.xjtu.cs.cyx.qshield.logical.ACPolicyApply
org.apache.spark.sql.qshield.QShieldDatasetFunctions .up.> edu.xjtu.cs.cyx.qshield.logical.ResPrepared
edu.xjtu.cs.cyx.qshield.QShieldOperators .down.|> org.apache.spark.sql.qshield.Strategy
@enduml
