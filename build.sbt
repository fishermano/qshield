/**
 * build configuration on root project
 * @author Yaxing Chen
 */

/**
 * common setting parameters
 */
lazy val commonSettings = Seq(
  organization := "edu.nwpu.cs",
  version := "0.4",
  scalaVersion := "2.11.12",
  sparkVersion := "2.4.5",
  spName := "cs/qshield"
)

/**
 * define root project
 */
lazy val root = (project in file(".")).aggregate(core, owner, user).settings(
    commonSettings,
    name := "qshield"
  )

/**
 * define core project
 */
lazy val core = (project in file("core")).dependsOn(owner).settings(
    commonSettings,
    name := "qshield-core"
  )

/**
 * define owner project
 */
lazy val owner = (project in file("owner")).settings(
    commonSettings,
    name := "data-owner"
  )

/**
 * define user project
 */
lazy val user = (project in file("user")).settings(
    commonSettings,
    name := "data-user"
  )

/**
 * re-define compile task by setting restApisGenRunableScriptTask as a prerequisite
 * @return build files generated by all projects and qshield script generated by restApisGenRunableScriptTask
 */
compile in Compile := { (compile in Compile).dependsOn(restApisGenRunableScriptTask).value }

/**
 * declare a task to generate a runable script for qshield service
 * @return a runable script named qshield
 */
val restApisGenRunableScriptTask = TaskKey[File]("restApisGenRunableScript",
  "Generate a runable script to start restful api server for qshield.")

/**
 * define base directory
 * @return string of base directory
 */
baseDirectory in restApisGenRunableScriptTask := (baseDirectory in ThisBuild).value

/**
 * define the restApisGenRunableScriptTask
 * @return a runable script named qshield
 */
restApisGenRunableScriptTask := {
  val bootstrapScriptTarget = baseDirectory.value / "qshield"   // runable script file to be generated for qshield service
  if (!bootstrapScriptTarget.exists){
    import sys.process._
    val restApisSourceDir = baseDirectory.value / "rest"   // directory of restful-api project
    val bootstrapScript = restApisSourceDir / "dist" / "app"  // runable script file to be generated for restful-api service
    if(!bootstrapScript.exists){
      val pyInstallerResult = Process(Seq("pyinstaller", "-F", "app.spec"), restApisSourceDir).! // pyinstaller execution to generate restful-api script
      if (pyInstallerResult != 0) sys.error("Generate runable restful api bootstrap failed.")
    }
    // IO.copyFile(bootstrapScript, bootstrapScriptTarget)
    val bootstrapScriptTargetCreated = Process(Seq("ln", "-s", s"$bootstrapScript", s"$bootstrapScriptTarget"), restApisSourceDir).! // ln execution to generate qshield script by linking restful-api script
    if (bootstrapScriptTargetCreated != 0) sys.error("Generate runable qshield link file failed.")
  }
  bootstrapScriptTarget // return qshield script
}

/**
 * re-define clean task by setting cleanRestApisTask as a prerequisite
 * @type {[type]}
 */
clean := { clean.dependsOn(cleanRestApisTask).value }

/**
 * declare a task to clean up build files generated in rest project
 * @return
 */
val cleanRestApisTask = TaskKey[Unit]("cleanRestApis",
  "clean files generated by restApisGenRunableScriptTask.")

/**
 * define the cleanRestApisTask
 * @return
 */
cleanRestApisTask := {
  val bootstrapScriptBuildDir = baseDirectory.value / "rest" / "build"
  val bootstrapScriptDistDir = baseDirectory.value / "rest" / "dist"
  val rootCacheDir = baseDirectory.value / "rest" / "__pycache__"
  val confCacheDir = baseDirectory.value / "rest" / "conf" / "__pycache__"
  val modelCacheDir = baseDirectory.value / "rest" / "models" / "qshield" / "__pycache__"
  val timersCacheDir = baseDirectory.value / "rest" / "timers" / "__pycache__"
  val rootProjTargetDir = baseDirectory.value / "project" / "target"
  val rootProjProjectDir = baseDirectory.value / "project" / "project"
  val rootTargetDir = baseDirectory.value / "target"
  if (restApisGenRunableScriptTask.value.exists) IO.delete(restApisGenRunableScriptTask.value)
  if (bootstrapScriptBuildDir.exists) IO.delete(bootstrapScriptBuildDir)
  if (bootstrapScriptDistDir.exists) IO.delete(bootstrapScriptDistDir)
  if (rootCacheDir.exists) IO.delete(rootCacheDir)
  if (confCacheDir.exists) IO.delete(confCacheDir)
  if (modelCacheDir.exists) IO.delete(modelCacheDir)
  if (timersCacheDir.exists) IO.delete(timersCacheDir)
  if (rootTargetDir.exists) IO.delete(rootTargetDir)
  if (rootProjTargetDir.exists) IO.delete(rootProjTargetDir)
  if (rootProjProjectDir.exists) IO.delete(rootProjProjectDir)
}
